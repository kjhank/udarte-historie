---
import type { HTMLAttributes } from 'astro/types'
import { PlayButton } from './icons/index.astro';

type Props = HTMLAttributes<'div'> & {
  fileName: string;
  videoProps?: HTMLAttributes<'video'>;
};

const { fileName, videoProps, ...props} = Astro.props;

const isDev = import.meta.env.DEV;

const prefix = isDev ? '' : import.meta.env.VIDEO_PREFIX;

const paths = {
  mp4: `${prefix}/videos/${fileName}.mp4`,
  webm: `${prefix}/videos/${fileName}.webm`,
};

---

<style>
  .video-player {
    cursor: pointer;
    display: grid;
    grid-template: 'main';
    place-items: center;

    > * {
      grid-area: main;
    }
  }

  video {
    max-inline-size: 100%;

    &::-webkit-media-controls-overlay-play-button {
      display: none;
    }
  }

  button {
    all: unset;

    pointer-events: none;

    z-index: 1;

    display: block;

    inline-size: 14.5%;

    transition: scale var(--t-fast), opacity var(--t-fast);

    > svg {
      inline-size: 100%;
      block-size: auto;
    }

    &.hidden {
      scale: 0;
      opacity: 0;
    }
  }
</style>

<script>
  const video = document.querySelector('video');
  const handlePlayback = (event: Event) => {

    const { target } = event;
    if (!(target instanceof HTMLVideoElement)) return;

    if (event.type === 'play') {

      target.nextElementSibling?.classList.add('hidden');
    }

    if (event.type === 'pause') {

      target.nextElementSibling?.classList.remove('hidden');
    }
  }

  const handleClick = async (event: Event) => {

    event.preventDefault();
    const { currentTarget } = event;

    if (!(currentTarget instanceof HTMLVideoElement)) return;

    const { paused } = currentTarget;

    if (paused) {
      try {
        await currentTarget.play();
      } catch (error) {

      }
    } else {
      currentTarget.pause();
    }
  }

  const isTouch = 'ontouchstart' in window;

  video?.addEventListener(isTouch ? 'pointerup' : 'click', handleClick);
  video?.addEventListener('play', handlePlayback);
  video?.addEventListener('pause', handlePlayback);
</script>

<div {...props} tabindex="0" class={`video-player narrow ${props.class ?? ''}`}>
  <video {...videoProps} controls controlslist="timeline">
    <source src={paths.webm} type="video/webm">
    <source src={paths.mp4} type="video/mp4">
    Pobierz wideo: <a href={paths.webm}>webm</a>, <a href={paths.mp4}>mp4</a>
    <track kind="subtitles" srclang="pl" src={`/videos/${fileName}.vtt`} >
  </video>
  <button type="button" data-interaction="play">
    <PlayButton />
    {prefix}
  </button>
</div>

